{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\natali.kaefer\\\\Workspace\\\\kaefer-logistik\\\\logistik-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\natali.kaefer\\\\Workspace\\\\kaefer-logistik\\\\logistik-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\natali.kaefer\\\\Workspace\\\\kaefer-logistik\\\\logistik-app\\\\src\\\\components\\\\molecules\\\\Login\\\\Authentication.js\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\nimport './Authentication.scss';\nimport Input from '../../atoms/Form/Input/Input';\nimport Button from '../../atoms/Button/Button';\nimport Spinner from '../../atoms/Spinner/Spinner';\nimport * as actions from '../../../store/actions';\n\nvar Authentication = function Authentication() {\n  var loginForm = {\n    email: {\n      elType: 'input',\n      elConfig: {\n        type: 'email',\n        placeholder: 'E-Mail-Adresse'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elType: 'password',\n      elConfig: {\n        type: 'password',\n        placeholder: 'Passwort'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  };\n\n  var checkValidation = function checkValidation(value, rules) {\n    var isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      var pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      var _pattern = /^\\d+$/;\n      isValid = _pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  var inputChangedHandler = function inputChangedHandler(ev, formId) {\n    console.log(\"inputChangedHandler value - formId\", ev.target.value, formId); //touched, wenn user etwas eingegeben hat\n\n    var updatedControls = _objectSpread({}, loginForm, _defineProperty({}, formId, _objectSpread({}, loginForm[formId], {\n      value: ev.target.value,\n      valid: checkValidation(ev.target.value, loginForm[formId].validation),\n      touched: true\n    })));\n\n    _this.setState({\n      loginForm: updatedControls\n    });\n  };\n\n  var onSubmitFormHandler = function onSubmitFormHandler(ev) {\n    ev.preventDefault(); // props.onAuth(loginForm.email.value, loginForm.password.value);\n  };\n\n  var onClickedHandler = function onClickedHandler() {\n    console.log('onClickedHandler'); // this.setState(prevState => {\n    //    return {isSignup: !prevState.isSignup};\n    //  });\n  };\n\n  var loginFormEl = [];\n  var errorMessage = null;\n\n  for (var key in loginForm) {\n    loginFormEl.push({\n      id: key,\n      config: loginForm[key]\n    });\n  }\n\n  var form = loginFormEl.map(function (formEl) {\n    return React.createElement(Input, {\n      elType: formEl.config.elType,\n      key: formEl.id,\n      elConfig: formEl.elConfig,\n      value: formEl.config.value,\n      invalid: !formEl.config.valid,\n      shouldValidate: formEl.config.validation,\n      touched: formEl.config.touched,\n      label: formEl.config.elConfig.placeholder,\n      changed: function changed(ev) {\n        return inputChangedHandler(ev, formEl.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    });\n  }); // if(this.props.loading) {\n  //    form = <Spinner/>\n  //}\n  //if(this.props.error){\n  //   errorMessage = (\n  //      <p>{this.props.error.message}</p>\n  // )\n  // }\n\n  var authRedirect = null; // if (this.props.isAuthenticated) {\n  //    authRedirect = <Redirect to=\"/\"/>\n  //}\n\n  return React.createElement(\"div\", {\n    className: \"Auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, authRedirect, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Login \"), errorMessage, React.createElement(\"form\", {\n    onSubmit: function onSubmit(ev) {\n      return onSubmitFormHandler(ev);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, form, React.createElement(Button, {\n    clicked: onClickedHandler,\n    btnType: \"Primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Anmelden \")));\n};\n\nexport default Authentication;","map":{"version":3,"sources":["C:/Users/natali.kaefer/Workspace/kaefer-logistik/logistik-app/src/components/molecules/Login/Authentication.js"],"names":["React","connect","Redirect","Input","Button","Spinner","actions","Authentication","loginForm","email","elType","elConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","checkValidation","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangedHandler","ev","formId","console","log","target","updatedControls","setState","onSubmitFormHandler","preventDefault","onClickedHandler","loginFormEl","errorMessage","key","push","id","config","form","map","formEl","authRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport  './Authentication.scss';\r\nimport Input from '../../atoms/Form/Input/Input'\r\nimport Button from '../../atoms/Button/Button';\r\nimport Spinner from '../../atoms/Spinner/Spinner'\r\nimport * as actions from '../../../store/actions'\r\n\r\n\r\n\r\nconst Authentication = () => {\r\n\r\n    const loginForm = {\r\n                email: {\r\n                    elType: 'input',\r\n                    elConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'E-Mail-Adresse'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        isEmail: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                    \r\n                },\r\n                password: {\r\n                    elType: 'password',\r\n                    elConfig: {\r\n                        type: 'password',\r\n                        placeholder: 'Passwort'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 6\r\n                    },\r\n\r\n                    valid: false,\r\n                    touched: false\r\n                  \r\n                }\r\n            };\r\n\r\n    const checkValidation = (value, rules) => {\r\n        let isValid = true;\r\n    \r\n        if (!rules) {\r\n            return true;\r\n        }\r\n    \r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength &&  isValid\r\n        }\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n    \r\n        return isValid;\r\n    };\r\n    \r\n    const inputChangedHandler = (ev, formId) => {\r\n        console.log(\"inputChangedHandler value - formId\", ev.target.value, formId);\r\n        \r\n        //touched, wenn user etwas eingegeben hat\r\n        const updatedControls = {\r\n            ...loginForm,\r\n            [formId]: {\r\n                ...loginForm[formId],\r\n                value: ev.target.value,\r\n                valid: checkValidation(ev.target.value, loginForm[formId].validation),\r\n                touched: true\r\n            }\r\n        };\r\n    \r\n        this.setState({loginForm: updatedControls});\r\n    };\r\n    \r\n    const onSubmitFormHandler = (ev) => {\r\n        ev.preventDefault();\r\n       // props.onAuth(loginForm.email.value, loginForm.password.value);\r\n        \r\n   \r\n    };\r\n    \r\n    const onClickedHandler = () => {\r\n        console.log('onClickedHandler');\r\n       // this.setState(prevState => {\r\n        //    return {isSignup: !prevState.isSignup};\r\n      //  });\r\n    };\r\n\r\n    const loginFormEl = [];\r\n    let errorMessage = null;\r\n        \r\n    for (let key in loginForm) {\r\n        loginFormEl.push({\r\n            id: key,\r\n            config: loginForm[key]\r\n        });\r\n    }\r\n        \r\n        \r\n    let form = loginFormEl.map( formEl => (\r\n        <Input\r\n            elType={formEl.config.elType}\r\n            key={formEl.id}\r\n            elConfig={formEl.elConfig}\r\n            value={formEl.config.value}\r\n            invalid={!formEl.config.valid}\r\n            shouldValidate={formEl.config.validation}\r\n            touched={formEl.config.touched}\r\n            label={formEl.config.elConfig.placeholder}\r\n            changed={(ev) => inputChangedHandler(ev, formEl.id)}\r\n        /> )\r\n    );\r\n        \r\n   // if(this.props.loading) {\r\n    //    form = <Spinner/>\r\n    //}\r\n\r\n  //if(this.props.error){\r\n    //   errorMessage = (\r\n     //      <p>{this.props.error.message}</p>\r\n      // )\r\n  // }\r\n       \r\n   let authRedirect = null;\r\n  // if (this.props.isAuthenticated) {\r\n    //    authRedirect = <Redirect to=\"/\"/>\r\n    //}\r\n      \r\n    return (\r\n        <div className=\"Auth\">\r\n            {authRedirect}\r\n            <h3>Login </h3>\r\n            {errorMessage}\r\n            <form  onSubmit={(ev) => onSubmitFormHandler(ev)}>\r\n                {form}\r\n                <Button\r\n                    clicked={onClickedHandler}\r\n                    btnType=\"Primary\"\r\n                >Anmelden </Button>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Authentication;\r\n"]},"metadata":{},"sourceType":"module"}